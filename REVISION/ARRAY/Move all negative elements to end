Input : arr[] = [1, -1, 3, 2, -7, -5, 11, 6 ]
Output : [1, 3, 2, 11, 6, -1, -7, -5]
Explanation: By doing operations we separated the integers without changing the order.











class Solution {
  public:
    void segregateElements(vector<int>& arr) {
        // Your code goes here
        vector<int> temp;
        int n=arr.size();
        for(int i=0;i<n;i++)
        {
            if(arr[i]>=0)
            temp.push_back(arr[i]);
        }
        
        for(int i=0;i<n;i++)
        {
            if(arr[i]<0)
            temp.push_back(arr[i]);
        }
        
        for(int i=0;i<n;i++)
        {
            arr[i]=temp[i];
        }
        
        // return arr[i];
    }
};

















 Ye Approach Kab Lagega? (Use Cases)
1. Move negative elements to end (preserving order)
Jaise tu abhi kiya:

cpp
Copy
Edit
arr = [1, -2, 3, -4, 5]  
ðŸ‘‰ Output: [1, 3, 5, -2, -4]
2. Separate 0s and 1s (or any binary condition) while preserving order
cpp
Copy
Edit
arr = [1, 0, 1, 0, 1]  
ðŸ‘‰ Output: [1, 1, 1, 0, 0]
Yahan bhi stable partitioning lagega if order matter karta hai.

3. Segregate even and odd numbers
cpp
Copy
Edit
arr = [2, 4, 1, 3, 5, 6]  
ðŸ‘‰ Output: [2, 4, 6, 1, 3, 5]
Even pehle, odd baad mein, but same order maintain karni ho to yehi approach chalega.

4. Partition based on any condition
Jaise:

All vowels before consonants in a string

All high scores (>50) before low scores

All uppercase letters before lowercase letters

Condition bas itna hai: Agar order maintain karni hai, to temporary array (or vector) use karna best rehta hai.

