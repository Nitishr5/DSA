iseme hm is step wise solve krenge
1. getMid()
2.reverse list after middle =>  reverse()
3. Compare both half
4.repeate step2

time-complaxity=O(N)
s.c== O(1) aayga 
phle wale ka time ans space = O(N) aa rha tha.







class Solution {
    private:
    Node* getMid(Node* head){
        Node* slow=head;
        Node* fast=head->next;
        
        while(fast!=NULL && fast->next!=NULL){
            fast=fast->next->next;
            slow=slow->next;
        }
        return slow;
    }
    
    Node* reverse(Node *head){
        Node* curr=head;
        Node* prev=NULL;
        Node* next=NULL;
        
        while(curr !=NULL){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
  public:
    // Function to check whether the list is palindrome.
    bool isPalindrome(Node *head) {
        // Your code here
        if(head==NULL || head->next==NULL){
            return true;
        }
        
        // step 1-> find middle
        Node* middle= getMid(head);
        
        //step2 -> reverse list after middle
        Node* temp=middle->next;
        middle->next=reverse(temp);
        
        
        // step3 - Compare both half
        
        Node* head1=head;
        Node* head2=middle->next;
        
        while(head2 !=NULL){
            if(head1->data!=head2->data){
                return false;
            }
            head1=head1->next;
            head2=head2->next;
        }
        //step4 - repeate step2
        temp=middle->next;
        middle->next=reverse(temp);
        
        return true;
    }
};
