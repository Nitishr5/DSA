Using this approch we take a temprory node and node rearrange using pointers" 


⚙️ Idea (Without changing data):
0s, 1s, and 2s ke liye 3 dummy nodes banate hain:

zeroHead, oneHead, twoHead

Har value ko uske dummy list me add karte hain.

Fir teeno list ko link kar dete hain:

0s → 1s → 2s

Final head ban jata hai zeroHead->next (ya jo non-empty list pehla mile)









#include<iostream>
using namespace std;
class Node{
    public:
  int data;
  Node* next;
  
  Node (int data){
      this->data=data;
      this->next=NULL;
  }
  
};

void Insertathead(Node* &head,int data){
    Node* temp=new Node(data);
    temp->next=head;
    head=temp;
}

void insertattail(Node* &tail, int data){
    Node* temp=new Node(data);
    tail->next=temp;
    tail=temp;
}

void print(Node* head){
    Node* temp=head;
    
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
void insertAtTail(Node* &tail, Node* curr){
    
    tail->next=curr;
    tail=curr;
}


Node* sortList(Node *&head){
     // Dummy heads
    Node* zeroHead = new Node(-1);
    Node* zeroTail = zeroHead;  
    Node* oneHead = new Node(-1);
    Node* oneTail = oneHead;
    Node* twoHead = new Node(-1);
    Node* twoTail = twoHead;

    
    Node* curr=head;
    
    while(curr!=NULL){
        
        int value=curr->data;
        
        if(value == 0){
            insertAtTail(zeroTail, curr);
        }
        else if(value==1){
             insertAtTail(oneTail, curr);
        }
        else if(value==2){
            insertAtTail(twoTail,curr);
        }
        
        curr=curr->next;
        
    }
     
     //merge 3 sblist
     
     // 1s list not empty
     if(oneHead->next !=NULL){
         zeroTail->next=oneHead->next;
     }
     else{
         // 1s list->empty
         zeroTail->next=twoHead->next;
     }
     
     oneTail->next = twoHead->next;
     twoTail->next=NULL;
    
    
    //setup Head
    head=zeroHead->next;
    
    //delete dummy nodes
    delete zeroHead;
    delete oneHead;
    delete twoHead;
    
    
    return head;
}

int main(){
    Node* node1=new Node(1);
    
    Node* head=node1;
    Node* tail=node1;
    
    // Insertathead(head,12);
    // print(head);
    // Insertathead(head,22);
    // print(head);
    
    insertattail(tail,0);
    print(head);
    
       insertattail(tail,2);
       print(head);
          insertattail(tail,1);
    print(head);
       insertattail(tail,2);
    print(head);
    
    
    sortList(head);
    cout<<"After sort Node ->"<<endl;
    print(head);
}
