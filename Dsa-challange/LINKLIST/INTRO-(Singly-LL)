What is Linked List?
A linked list is also a linear data structure like an array but the difference between an array and a linked list is “In an array, the elements are stored at contiguous memory locations but in a linked list the elements are not stored at the contiguous memory locations, they are stored dynamically”.

What is the head of a Linked list?

When you are allocating memory of elements dynamically it is obvious that you don’t have direct access to any element like arrays but you have to start somewhere right??

That’s why we gave the address of the first node a special name called Head we also have to stop somewhere that’s why we specified the pointer of the last node is NULL.

Types of Linked List:===>
Singly Linked List
Doubly Linked List
Circular Linked List






SINGLY LINK LIST======>

insersion===> insert at head

// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;
class Node{
    public:
    int data;
    Node* next;
    
    //constructor
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
};


void insertAtHead(Node* &head,int d){
    //new node create
    Node* temp=new Node(d);
    temp->next=head;
    head=temp;
}

void print(Node* &head){
    Node* temp=head;
    
    while(temp !=NULL){ //for print all elemnt
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
int main() {
    //Create a new node
  Node* node1= new Node(10);//add/create new node
//   cout<<node1->data<<endl;
//   cout<<node1->next<<endl;
  
  //head pointed to node1
  Node* head=node1;
  print(head);
  
  insertAtHead(head,12);// new node
  
  print(head);
  
  return 0;
}
















//INSERT AT TAIL ===============================================>>>>>>>>>>>>>>>>>


#include <iostream>
using namespace std;
class Node{
    public:
    int data;
    Node* next;
    
    //constructor
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
};


void insertAtHead(Node* &head,int d){
    //new node create
    Node* temp=new Node(d);
    temp->next=head;
    head=temp;
}

void insertAtTail(Node* &tail, int d){
    Node* temp=new Node(d);
    tail->next = temp;
    tail=temp;
}

void print(Node* &head){
    Node* temp=head;
    
    while(temp !=NULL){ //for print all elemnt
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
int main() {
    //Create a new node
  Node* node1= new Node(10);//add/create new node

  
  //head pointed to node1
  Node* head=node1;
  Node* tail=node1;
  print(head);
  
  insertAtTail(tail,12);// new node
  
  print(head);
   insertAtTail(tail,15);
   print(head);
  
  return 0;
}



















DELETE NODE ================================================================>>>>

// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;
class Node{
    public:
    int data;
    Node* next;
    
    //constructor
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
    
    //destructor
    ~Node(){
        int value=this->data;
        //memory free
        if(this->next!=NULL){
            delete next;
            this->next=NULL;
        }
        cout<<"Memory is free for node with data "<<value<<endl;
    }
};


void insertAtHead(Node* &head,int d){
    //new node create
    Node* temp=new Node(d);
    temp->next=head;
    head=temp;
}

void insertAtTail(Node* &tail, int d){
    Node* temp=new Node(d);
    tail->next = temp;
    tail=temp;
}

void print(Node* &head){
    Node* temp=head;
    
    while(temp !=NULL){ //for print all elemnt
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}

void deleteNode(int position,Node* &head){
    //deleting first or start node
    if(position == 1){
        Node* temp=head;
        head = head->next;
        //memory free start node
        temp->next=NULL;
        delete temp;
    }
    else{
        //deleting any middle node or last node
        Node* curr=head;
        Node* prev=NULL;
        
        int cnt=1;
        while(cnt<position){
            prev=curr;
            curr=curr->next;
            cnt++;
        }
        prev->next=curr->next;
        curr->next=NULL;
        delete curr;
    }
}
int main() {
    //Create a new node
  Node* node1= new Node(10);//add/create new node

  
  //head pointed to node1
  Node* head=node1;
  Node* tail=node1;
  print(head);
  
  insertAtTail(tail,12);// new node
  
  print(head);
  
   insertAtTail(tail,15);
   print(head);
   
   insertAtTail(tail,25);
   print(head);
   
  deleteNode(2,head);
  print(head);
  
//   cout<<"head"<<head ->data<<endl;
//   cout<<"tail"<<tail->data<<endl;
  return 0;
}
