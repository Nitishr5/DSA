// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;

    // Write C++ code here
   class Node{
       public:
       int data;
       Node* prev;
       Node* next;
       
       
       //constructor
       Node(int d){
           this->data=d;
           this->next=NULL;
       }
       ~Node(){
           int val=this->data;
           if(next!=NULL){
               delete next;
               next=NULL;
           }
           cout<<"Memory free for node with data"<<val<<endl;
       }
   };
   //Traversing a linklist 
   void print(Node* head){
       Node* temp=head;
       
       while(temp!=NULL){
           cout<<temp->data<<" ";
           temp=temp->next;
       }
       cout<<endl;
   }
   
   //print the size of Linklist
   int getLength(Node* head){
       int len=0;
          Node* temp=head;
       
       while(temp!=NULL){
           len++;
           temp=temp->next;
       }
       return len;
   }
   
   void insertAtHead(Node* &tail,Node* &head,int data){
       //empty list
       if(head==NULL){
           Node* temp=new Node(data);
           head=temp;
           tail=temp;
       }
       else{
       Node* temp=new Node(data);
       temp->next=head;
       head->prev=temp;
       head=temp;
       }
   }
   //insert ata tail function -------
   void insertAtTail(Node* &tail,Node* &head,int data){
        if(tail==NULL){
           Node* temp=new Node(data);
           tail=temp;
           head=temp;
       }
       else{
       Node* temp=new Node(data);
       tail->next=temp;
       temp->prev=tail;
       tail=temp;
       }
   }
   
   void insertAtPosition(Node* &tail,Node* &head,int position,int data){
       
       //insert at start
       if(position == 1){
           insertAtHead(head,tail,data);
           return;
       }
       
       Node* temp=head;
       int cnt=1;
       
       while(cnt<position-1){
           temp=temp->next;
           cnt++;
       }
       //inserting at Last position
       if(temp->next ==NULL){
           insertAtTail(tail,head,data);
           return;
       }
       
       //creating a node for data
       Node* nodeToInsert = new Node(data);
       nodeToInsert->next=temp->next;
       temp->next->prev=nodeToInsert;
       temp->next=nodeToInsert;
       nodeToInsert->prev=temp;
   }
   
   void deleteNode(int position,Node* &head){
    //deleting first or start node
    if(position == 1){
        Node* temp=head;
        temp->next->prev=NULL;
        head = temp->next;
        temp->next=NULL;
        delete temp;   //memory free start node
    }
    else{
        //deleting any middle node or last node
        Node* curr=head;
        Node* prev=NULL;
        
        int cnt=1;
        while(cnt<position){
            prev=curr;
            curr=curr->next;
            cnt++;
        }
        
        curr->prev=NULL;
        prev->next=curr->next;
        curr->next=NULL;
        delete curr;
    }
}


   int main(){
       //this create a node..
       Node* node1=new Node(10);
       Node* head=node1;
       Node* tail=node1;
       print(head);
       cout<<getLength(head)<<endl;
       
       //insert at head 
       insertAtHead(tail,head,11);
       print(head);
       
       insertAtHead(tail,head,23);
       print(head);
       
       insertAtTail(tail,head,76);
       print(head);
       
       insertAtPosition(tail,head,2,100);
       print(head);
       
        insertAtPosition(tail,head,1,190);
       print(head);
       
        deleteNode(1,head);
        print(head);
       return 0;
   }
