Input: LinkedList: 3->5->2->4->1
Output: 1->2->3->4->5
Explanation: After sorting the given linked list, the resultant matrix will be 1->2->3->4->5.






class Solution {
  public:
  
  Node* findMid(Node* head){
      Node* slow=head;
      Node* fast=head->next;
      
      while(fast!=NULL && fast->next!=NULL)
      {
          slow=slow->next;
          fast=fast->next->next;
      }
      return slow;
  }
  
  Node* merge(Node* left, Node* right){
      if(left==NULL)
        return right;
        
        if(right==NULL)
        return left;
        
        Node* ans= new Node(-1);
        Node* temp=ans;
        
        //merge 2 sorted Linked List
        while(left!=NULL && right!=NULL){
            if(left->data < right->data){
                temp->next=left;
                temp=left;
                left=left->next;
            }
            else{
                temp->next=right;
                temp=right;
                  right=right->next;
            }
            // temp=temp->next;
        }
            
            while(left!=NULL){
                temp->next=left;
                temp=left;
                left=left->next;
            }
            
             while(right!=NULL){
                temp->next=right;
                temp=right;
                right=right->next;
            }
            ans=ans->next;
        return ans;
        }
  
    //code start from here
    // Function to sort the given linked list using Merge Sort.
    Node* mergeSort(Node* head) {
        // Base case
        if(head==NULL || head->next==NULL){
            return head;
        }
        
        //break linkd list into 2 halvs, after finding mid
        Node* mid=findMid(head);
        
        Node* left=head;
        Node* right=mid->next;
        mid->next=NULL;
        
        //recursive call to sorted both halves
        left=mergeSort(left);
        right=mergeSort(right);
        
        //merge both left and right halves
        Node* result= merge(left,right);
        
        return result;
    }
};





















DRY-RUN USING THIS 

Input Linked List:
4 -> 2 -> 1 -> 3

🔁 Step-by-step Dry Run:
🎯 Call: mergeSort(4 -> 2 -> 1 -> 3)
head != NULL and head->next != NULL → proceed

findMid() returns: 2

List gets split:

left = 4 -> 2

right = 1 -> 3

🔁 Recursive Call: mergeSort(4 -> 2)
findMid() = 4

Split:

left = 4

right = 2

Recursive calls:

mergeSort(4) → base case → returns 4

mergeSort(2) → base case → returns 2

Call merge(4, 2):

Compare: 2 < 4 → add 2 → then 4

Result: 2 -> 4

🔁 Recursive Call: mergeSort(1 -> 3)
findMid() = 1

Split:

left = 1

right = 3

Recursive calls:

mergeSort(1) → base case → returns 1

mergeSort(3) → base case → returns 3

Call merge(1, 3):

Compare: 1 < 3 → add 1 → then 3

Result: 1 -> 3

🔁 Final Merge:
Now merging:

left = 2 -> 4

right = 1 -> 3

Call merge(2 -> 4, 1 -> 3):

1 < 2 → add 1

2 < 3 → add 2

3 < 4 → add 3

then 4

Final Result: 1 -> 2 -> 3 -> 4

✅ Final Output:
txt
Copy
Edit
1 -> 2 -> 3 -> 4
