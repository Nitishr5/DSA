Given an array consisting only of 0s, 1s, and 2s, sort the array without using any sorting algorithm (i.e., no sort() function or comparison-based sorting).

Input: [2, 0, 2, 1, 1, 0]  
Output: [0, 0, 1, 1, 2, 2]


ðŸ§  Approach (Three Pointers):
Use 3 pointers: low, mid, and high

All start at:

low = 0, mid = 0, high = n-1

Traverse and perform swaps based on the value at arr[mid]:

If arr[mid] == 0, swap arr[low] and arr[mid], then low++, mid++

If arr[mid] == 1, just mid++

If arr[mid] == 2, swap arr[mid] and arr[high], then high-- (but donâ€™t move mid)






#include <iostream>
#include <vector>
using namespace std;

void sortColors(vector<int>& arr) {
    int low = 0, mid = 0, high = arr.size() - 1;

    while (mid <= high) {
        if (arr[mid] == 0) {
            swap(arr[low], arr[mid]);
            low++;
            mid++;
        } else if (arr[mid] == 1) {
            mid++;
        } else { // arr[mid] == 2
            swap(arr[mid], arr[high]);
            high--;
        }
    }
}

int main() {
    vector<int> arr = {2, 0, 2, 1, 1, 0};
    sortColors(arr);
    for (int num : arr)
        cout << num << " ";
    return 0;
}
