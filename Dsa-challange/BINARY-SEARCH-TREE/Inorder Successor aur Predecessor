Inorder Predecessor & Inorder Successor in a Binary Search Tree (BST)
In a Binary Search Tree (BST), the inorder traversal visits nodes in sorted (ascending) order.
Given a node in a BST:

Inorder Predecessor is the node that comes just before the given node in the inorder traversal.

Inorder Successor is the node that comes just after the given node in the inorder traversal.

üîç Definitions
‚úÖ Inorder Predecessor:
The largest node in the left subtree of the given node.

If there‚Äôs no left subtree, then go up the tree until you find a node which is right child of its parent ‚Äî then that parent is the predecessor.

‚úÖ Inorder Successor:
The smallest node in the right subtree of the given node.

If there‚Äôs no right subtree, then go up the tree until you find a node which is left child of its parent ‚Äî then that parent is the successor.

üß† Example BST

        20
       /  \
     10    30
    /  \     \
   5   15    40
For node 20:

Inorder Predecessor = 15 (rightmost in left subtree)

Inorder Successor = 30 (leftmost in right subtree)

For node 10:

Inorder Predecessor = 5

Inorder Successor = 15

For node 5:

Inorder Predecessor = None (no left and no parent where 5 is right child)

Inorder Successor = 10









üîÅ Inorder Traversal (BST):
Inorder traversal ka matlab hota hai:
Left ‚Üí Root ‚Üí Right

‚úÖ Inorder Successor aur Predecessor ka Rule:
üî∑ Inorder Successor:
Woh node hoti hai jo turant baad aati hai (inorder traversal mein)

Agar node ke right subtree hai:
‚Üí Us right subtree ka leftmost node hota hai successor

üî∂ Inorder Predecessor:
Woh node hoti hai jo turant pehle aati hai (inorder traversal mein)

Agar node ke left subtree hai:
‚Üí Us left subtree ka rightmost node hota hai predecessor

üìò Example Tree:
markdown
Copy
Edit
        20
       /  \
     10    30
    /  \     \
   5   15    40
üîç Inorder Traversal of This Tree:
5 ‚Üí 10 ‚Üí 15 ‚Üí 20 ‚Üí 30 ‚Üí 40

Now let's find successor and predecessor for node 20:

üî∑ Successor of 20:
20 ke right subtree me kya hai? ‚Üí 30

30 ke left me kuch hai? ‚ùå (nahi hai)

Toh leftmost node of right subtree = 30

‚úÖ Successor of 20 = 30

üî∂ Predecessor of 20:
20 ke left subtree me kya hai? ‚Üí 10

10 ke right me kya hai? ‚Üí 15

Rightmost node of left subtree = 15

‚úÖ Predecessor of 20 = 15

üéØ Leftmost aur Rightmost kaise nikaalte hain?
‚úÖ Leftmost (Successor ke liye):
Kisi node se start karo

Jab tak left hai:

Left me jaate jao

python
Copy
Edit
# Leftmost node




CODE PART======================================================>>>>>>>>>>>>>>>>>>>>

#include <iostream>
using namespace std;

// Node structure for BST
struct Node {
    int key;
    Node* left;
    Node* right;

    Node(int val) {
        key = val;
        left = right = NULL;
    }
};

// Insert node into BST
Node* insert(Node* root, int key) {
    if (!root) return new Node(key);

    if (key < root->key)
        root->left = insert(root->left, key);
    else
        root->right = insert(root->right, key);

    return root;
}

// Function to find predecessor and successor
void findPreSuc(Node* root, Node*& pre, Node*& suc, int key) {
    if (!root) return;

    if (root->key == key) {
        // Predecessor = rightmost of left subtree
        if (root->left) {
            Node* temp = root->left;
            while (temp->right)
                temp = temp->right;
            pre = temp;
        }

        // Successor = leftmost of right subtree
        if (root->right) {
            Node* temp = root->right;
            while (temp->left)
                temp = temp->left;
            suc = temp;
        }
    }
    else if (key < root->key) {
        suc = root;
        findPreSuc(root->left, pre, suc, key);
    }
    else {
        pre = root;
        findPreSuc(root->right, pre, suc, key);
    }
}

// Driver code
int main() {
    /* Example BST:
            20
           /  \
         10    30
        /  \     \
       5   15    40
    */

    Node* root = NULL;
    root = insert(root, 20);
    insert(root, 10);
    insert(root, 5);
    insert(root, 15);
    insert(root, 30);
    insert(root, 40);

    int key = 20;
    Node* pre = NULL;
    Node* suc = NULL;

    findPreSuc(root, pre, suc, key);

    if (pre)
        cout << "Predecessor of " << key << " is " << pre->key << endl;
    else
        cout << "No Predecessor\n";

    if (suc)
        cout << "Successor of " << key << " is " << suc->key << endl;
    else
        cout << "No Successor\n";

    return 0;
}






üîç Output for key = 20:
csharp
Copy
Edit
Predecessor of 20 is 15
Successor of 20 is 30












exmple 2=>>


üå≥ Example BST:
markdown
Copy
Edit
         50
        /  \
      30    70
     /  \   / \
   20   40 60  80
üîÅ Inorder Traversal:
Inorder = 20 ‚Üí 30 ‚Üí 40 ‚Üí 50 ‚Üí 60 ‚Üí 70 ‚Üí 80

üîç Let's find predecessor and successor for various nodes:
1Ô∏è‚É£ For node 50:
Predecessor = 40 (rightmost in left subtree)

Successor = 60 (leftmost in right subtree)

2Ô∏è‚É£ For node 30:
Predecessor = 20

Successor = 40

3Ô∏è‚É£ For node 20:
Predecessor = None

Successor = 30

4Ô∏è‚É£ For node 70:
Predecessor = 60

Successor = 80

5Ô∏è‚É£ For node 80:
Predecessor = 70

Successor = None
