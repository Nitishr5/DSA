void levelOrderTraversal(Node* root) {
    if (root == nullptr) return;

    queue<Node*> q;         // Use pointer type
    q.push(root);

    while (!q.empty()) {
        Node* temp = q.front();  // Use capital 'N' and pointer
        q.pop();

        cout << temp->data << " ";  // Use correct syntax: -> not =>

        if (temp->left) {
            q.push(temp->left);
        }
        if (temp->right) {
            q.push(temp->right);
        }
    }
}










THIS CODE FOR PRINT LEVEL WISE =========================>>>>>>>>>>>>    LIKE =====>    1
                                                                                     2 3
                                                                                     4 5


void levelOrderTraversal(Node* root)
{
    if (root == nullptr) return;

    queue<Node*> q;
    q.push(root);
    q.push(NULL); // Level separator

    while (!q.empty()) {
        Node* temp = q.front();
        q.pop();

        if (temp == NULL) {
            // End of current level
            cout << endl;
            if (!q.empty()) {
                q.push(NULL);  // Add marker for next level
            }
        } else {
            cout << temp->data << " ";

            if (temp->left) {
                q.push(temp->left);
            }
            if (temp->right) {
                q.push(temp->right);
            }
        }
    }
}















Full cord part===> all mix add and traverse







#include <iostream>
#include<queue>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;
    
    Node(int val) {
        data = val;
        left = nullptr;
        right = nullptr;
    }
};



// void levelOrderTraversal(Node* root)
// {
//     if (root == nullptr) return;
//     queue<Node*> q;
//     q.push(root);
//     q.push(NULL);
    
    
//     while(!q.empty()){
//         Node* temp=q.front();
//         cout<<temp->data<<" ";
//         q.pop();
        
        
//         if(temp==NULL){ //purana level comleted traverse ho chuka hai
//             cout<<endl;
//             if(!q.empty()) { //queue have still child node
//                 q.push(NULL);
//             }
//         }
//         else{
//               cout << temp->data << " ";
              
//               if(temp->left){
//             q.push(temp->left);
//         }
//         if(temp->right){
//             q.push(temp->right);
//         }
//         }
     
//     }
// }

void levelOrderTraversal(Node* root)
{
    if (root == nullptr) return;

    queue<Node*> q;
    q.push(root);
    q.push(NULL); // Level separator

    while (!q.empty()) {
        Node* temp = q.front();
        q.pop();

        if (temp == NULL) {
            // End of current level
            cout << endl;
            if (!q.empty()) {
                q.push(NULL);  // Add marker for next level
            }
        } else {
            cout << temp->data << " ";

            if (temp->left) {
                q.push(temp->left);
            }
            if (temp->right) {
                q.push(temp->right);
            }
        }
    }
}

int main() {
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    
   

    cout<<"Printing the level order tracersal output "<<endl;
    levelOrderTraversal(root);
    return 0;
}




