âœ… 1. Iterative Inorder Traversal (LNR)



#include <iostream>
#include <stack>
using namespace std;

// Node structure
struct Node {
    int val;
    Node* left;
    Node* right;

    // TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
     Node(int data) {
        val = data;
        left = nullptr;
        right = nullptr;
    }
};

// Iterative inorder traversal function
void inorderIterative(Node* root) {
    stack<Node*> st;
    Node* curr = root;

    while (curr != nullptr || !st.empty()) {
        // Step 1: Go to the leftmost node
        while (curr != nullptr) {
            st.push(curr);
            curr = curr->left;
        }

        // Step 2: Process the node
        curr = st.top();
        st.pop();
        cout << curr->val << " "; // Output the node value

        // Step 3: Go to the right subtree
        curr = curr->right;
    }
}

// Main function to test
int main() {
    /*
          1
         / \
        2   3
       / \   \
      4   5   6
    */

    // Manually creating the tree
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->right->right = new Node(6);

    // Performing inorder traversal
    cout << "Inorder Traversal (Iterative): ";
    inorderIterative(root);
    cout << endl;

    return 0;
}



















