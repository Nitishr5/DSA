#include <iostream>
#include <vector>
#include <string>

using namespace std;

vector<int> buildLPS(const string& pattern) {
    int m = pattern.size();
    vector<int> lps(m, 0);
    int length = 0;  // Length of the previous longest prefix suffix
    int i = 1;

    // Build the LPS array
    while (i < m) {
        if (pattern[i] == pattern[length]) {
            length++;
            lps[i] = length;
            i++;
        } else {
            if (length != 0) {
                length = lps[length - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }

    return lps;
}

int circularPatternMatch(const string& haystack, const string& needle) {
    string doubledHaystack = haystack + haystack; // Make the haystack circular
    int n = doubledHaystack.size();
    int m = needle.size();

    vector<int> lps = buildLPS(needle);

    int i = 0;  // Index for doubled haystack
    int j = 0;  // Index for needle

    while (i < n) {
        if (needle[j] == doubledHaystack[i]) {
            i++;
            j++;
        }

        if (j == m) {
            // Pattern found, return the start index of the match
            return i - j;
        }
        else if (i < n && needle[j] != doubledHaystack[i]) {
            if (j != 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }

    return -1; // If no match is found
}

int main() {
    string str = "cdrabroab";  // Haystack
    string pattern = "abro";  // Needle (Pattern)

    int result = circularPatternMatch(str, pattern);

    if (result != -1) {
        cout << "Pattern found at index: " << result << endl;
    } else {
        cout << "Pattern not found." << endl;
    }

    return 0;
}
