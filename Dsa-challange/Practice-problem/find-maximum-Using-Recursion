#include <iostream>
using namespace std;

// Recursive function to find the maximum element in the array
int findMax(int arr[], int n, int index, int maxSoFar) {
    // Base case: when the index is out of bounds
    if (index == n) {
        return maxSoFar;  // Return the maximum value found so far
    }
    
    // Recursive case: compare current element with maxSoFar
    if (arr[index] > maxSoFar) {
        maxSoFar = arr[index];  // Update maxSoFar if current element is greater
    }
    
    // Move to the next element in the array
    return findMax(arr, n, index + 1, maxSoFar);
}

int main() {
    int arr[] = {5, 8, 15, 17, 12};
    int n = sizeof(arr) / sizeof(arr[0]);  // Calculate the size of the array
    
    // Call the recursive function starting with index 0 and initial max value as arr[0]
    int result = findMax(arr, n, 0, arr[0]);
    
    cout << "Maximum element: " << result << endl;
    return 0;
}
